ðŸ”¥ Challenge #1: Job Listing Card Component (React)

Scenario:
Youâ€™ve been hired to help improve a job board site. The company wants reusable, readable components that match modern standards.

ðŸ§© Requirements:
Build a JobCard React component that:
- Accepts a prop with job details (title, company, location, salary range, remote status).
- Displays the info cleanly and accessibly.
- Highlights whether the role is remote or onsite.
- Has a "Save Job" button with a simple toggle (e.g. heart icon or text changes on click).

ðŸ›  Tech Constraints:
- Use JavaScript (not TypeScript).
- Functional components with hooks.
- No external component libraries (e.g., MUI, Bootstrap).
- You can style it with plain CSS or inline styles.

ðŸ’Ž Bonus (Optional):
- Add a filter bar (e.g. filter by location or remote).
- Make it mobile-friendly (responsive layout).
- Add a unit test using Jest/React Testing Library.

âœ… Submission:
- Submit component code, optionally with mock data and a parent wrapper to render multiple cards.


============================================================

ðŸ§  Challenge #2: Group Anagrams

Scenario:
Youâ€™ve been asked to help organize search queries. Your task is to group words that are anagrams of each otherâ€”i.e., made from the same letters in any order.

ðŸ§© Problem:
Write a function:
function groupAnagrams(words) {
  // your code here
}

Input:
An array of strings like:
["listen", "silent", "enlist", "hello", "ohlle", "world"]

Output:
A nested array where each subarray contains anagrams:
[
  ["listen", "silent", "enlist"],
  ["hello", "ohlle"],
  ["world"]
]

ðŸ›  Constraints:
- Donâ€™t use any external libraries.
- Optimize for readability and clarity.
- Bonus: handle edge cases like ["", "", "a", "a"].

ðŸ’¡ Tips:
- Use a hash map (object) to group.
- Sorting strings might help you identify anagrams.
